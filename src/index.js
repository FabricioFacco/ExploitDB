const fs = require("fs").promises;

class exploitdb {
    constructor(arq) {
        this.arq = arq;
        this.content = {};

        this._validateFile();
        this._loadFile();
    }

    // Verifica se o arquivo é .json
    _validateFile() {
        if (!this.arq.endsWith(".json")) {
            throw new Error("[!] O arquivo deve ser JSON");
        }
    }

    // Carrega o arquivo
    async _loadFile() {
        try {
            const fileData = await fs.readFile(this.arq, "utf8");
            this.content = JSON.parse(fileData);
        } catch (error) {
            if (error.code === "ENOENT") {
                await this._writeEmptyFile();
            } else {
                throw new Error(`[X] Erro ao carregar a exploitdb\n ${error}`);
            }
        }
    }

    // Escreve um arquivo JSON vazio se não existir
    async _writeEmptyFile() {
        try {
            await fs.writeFile(this.arq, "{}");
            this.content = {};
        } catch (error) {
            throw new Error(`[X] Erro ao criar o arquivo JSON vazio\n ${error}`);
        }
    }

    //Função que adiciona algum valor numeral na database
    async exAdd(path, value) {
        if (!path) return this._missingArgument("nome", path);
        if (!value) return this._missingArgument("valor", value);
        if (typeof value !== "number") throw new Error(`[!] Value estava esperando: 'number' mas recebeu ${typeof value}`);
        const valor = this.content[path] || 0;
        this.content[path] = valor + value;
        try {
            await fs.writeFile(this.arq, JSON.stringify(this.content));
        } catch (error) {
            throw new Error(`[X] Erro ao adicionar o valor na exploitdb\n ${error}`);
        }
    }

    // Função quee subtrai algum valor numeral na database
    async exSubtract(path, value) {
        if (!path) return this._missingArgument('nome', path);
        if (!value) return this._missingArgument('valor', value);
        if (typeof value !== "number") throw new Error("[!] Value estava esperando: 'number' mas recebeu" + " " + typeof value);
        const valor = this.content[path] || 0;
        this.content[path] = valor - value;
        try {
            await fs.writeFile(this.arq, JSON.stringify(this.content));
        } catch (error) {
            throw new Error(`[X] Erro ao subtrair o valor na exploitdb\n ${error}`);
        }
    }

    // Função que adiciona um valor a chave
    async exSet(path, value) {
        if (!path) return this._missingArgument('nome', path);
        this.content[path] = value;
        try {
            await fs.writeFile(this.arq, JSON.stringify(this.content));
        } catch (error) {
            throw new Error(`[X] Erro ao definir o valor na exploitdb\n ${error}`);
        }
    }

    // Função que retorna os itens de nosso banco de dados
    exAll(tipe = 'all') {
        switch (tipe) {
            case 'all': return Object.entries(this.content);
            case 'values': return Object.values(this.content);
            case 'keys': return Object.keys(this.content);
            case 'object': return this.content;
            default: throw new TypeError(`[!] Metodo exAll() recebe os tipos: all, values, keys e object\n porem, recebeu ${tipe}`);
        }
    }

    // Função que deleta algum valor pelo nome
    async exDelete(path) {
        if (!path) return this._missingArgument('nome', path);
        delete this.content[path];
        try {
            await fs.writeFile(this.arq, JSON.stringify(this.content));
        } catch (error) {
            throw new Error(`[X] Erro ao deletar ${path} da exploitdb\n ${error}`);
        }
    }

    // Função que busca algo de dentro da database pelo nome
    async exGet(path) {
        if (!path) return this._missingArgument('nome', path);
    
        try {
            return this.content[path];
        } catch (error) {
            throw new Error(`[X] Erro ao buscar o valor no path "${path}"\n ${error}`);
        }
    }

    // Função que adiciona String a um Local
    async exAddS(path, value) {
        if (!path) throw new Error("[!] Falta método 'nome'");
        if (!value) throw new Error("[!] Falta método 'valor'");
        if (typeof value !== "string") {
            throw new Error(`[!] Value estava esperando: 'string' mas recebeu ${typeof value}`);
        }

        this.content[path] = value;
        try {
            await fs.writeFile(this.arq, JSON.stringify(this.content));
        } catch (error) {
            throw new Error(`[X] Erro ao adicionar ${value} a ${path} na exploitdb\n ${error}`);
        }
    }

    _missingArgument(op, mt) {
        throw new Error(`[!] Opção ${op} falta método ${mt}`);
    }
}

// Exemplo de uso do módulo
const db = new exploitdb("database.json");
console.log(db.exAll("all"));